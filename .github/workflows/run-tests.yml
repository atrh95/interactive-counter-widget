name: Run Tests

on:
  workflow_call:

jobs:
  build-for-testing:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Mint
        run: brew install mint

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Generate Xcode Project
        run: mint run xcodegen generate

      - name: Make find-simulator script executable
        run: chmod +x .github/scripts/find-simulator.sh

      - name: Select Simulator
        id: select_simulator
        run: |
          SIMULATOR_ID=$(./.github/scripts/find-simulator.sh)
          echo "シミュレータ ID ($SIMULATOR_ID) が選択されました"
          echo "simulator_id=$SIMULATOR_ID" >> "$GITHUB_OUTPUT"

      - name: Boot Simulator
        run: |
          echo "シミュレータ (${{ steps.select_simulator.outputs.simulator_id }}) を起動しています..."
          xcrun simctl boot "${{ steps.select_simulator.outputs.simulator_id }}" || echo "シミュレータは既に起動しています"
          echo "✅ シミュレータが正常に起動しました"

      - name: Build for Testing
        run: |
          set -o pipefail
          echo "テスト用ビルドを実行します"
          mkdir -p "${{ github.workspace }}/ci-outputs/test-results"
          xcodebuild build-for-testing \
            -project "CounterApp.xcodeproj" \
            -scheme "CounterApp" \
            -destination "platform=iOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
            -derivedDataPath "${{ github.workspace }}/ci-outputs/test-results/DerivedData" \
            -configuration Debug \
            -skipMacroValidation \
            CODE_SIGNING_ALLOWED=NO \
            | xcbeautify

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-products
          path: |
            ${{ github.workspace }}/ci-outputs/test-results/DerivedData/Build/Products/
          retention-days: 1

  unit-test:
    runs-on: macos-latest
    needs: build-for-testing
    outputs:
      result: ${{ steps.unit_tests.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Mint
        run: brew install mint

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Generate Xcode Project
        run: mint run xcodegen generate

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-products
          path: ${{ github.workspace }}/ci-outputs/test-results/DerivedData/Build/Products/

      - name: Make find-simulator script executable
        run: chmod +x .github/scripts/find-simulator.sh

      - name: Select Simulator
        id: select_simulator
        run: |
          SIMULATOR_ID=$(./.github/scripts/find-simulator.sh)
          echo "シミュレータ ID ($SIMULATOR_ID) が選択されました"
          echo "simulator_id=$SIMULATOR_ID" >> "$GITHUB_OUTPUT"

      - name: Boot Simulator
        run: |
          echo "シミュレータ (${{ steps.select_simulator.outputs.simulator_id }}) を起動しています..."
          xcrun simctl boot "${{ steps.select_simulator.outputs.simulator_id }}" || echo "シミュレータは既に起動しています"
          echo "✅ シミュレータが正常に起動しました"

      - name: Run Unit Tests
        id: unit_tests
        run: |
          set -o pipefail
          echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用してユニットテストを実行します"
          xcodebuild test-without-building \
            -project "CounterApp.xcodeproj" \
            -scheme "CounterAppTests" \
            -destination "platform=iOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
            -derivedDataPath "${{ github.workspace }}/ci-outputs/test-results/DerivedData" \
            -enableCodeCoverage NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcbeautify

  ui-test:
    runs-on: macos-latest
    needs: build-for-testing
    outputs:
      result: ${{ steps.ui_tests.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Mint
        run: brew install mint

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Generate Xcode Project
        run: mint run xcodegen generate

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-products
          path: ${{ github.workspace }}/ci-outputs/test-results/DerivedData/Build/Products/

      - name: Make find-simulator script executable
        run: chmod +x .github/scripts/find-simulator.sh

      - name: Select Simulator
        id: select_simulator
        run: |
          SIMULATOR_ID=$(./.github/scripts/find-simulator.sh)
          echo "シミュレータ ID ($SIMULATOR_ID) が選択されました"
          echo "simulator_id=$SIMULATOR_ID" >> "$GITHUB_OUTPUT"

      - name: Boot Simulator
        run: |
          echo "シミュレータ (${{ steps.select_simulator.outputs.simulator_id }}) を起動しています..."
          xcrun simctl boot "${{ steps.select_simulator.outputs.simulator_id }}" || echo "シミュレータは既に起動しています"
          echo "✅ シミュレータが正常に起動しました"

      - name: Run UI Tests
        id: ui_tests
        run: |
          set -o pipefail
          echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用して UI テストを実行します"
          xcodebuild test-without-building \
            -project "CounterApp.xcodeproj" \
            -scheme "CounterAppUITests" \
            -destination "platform=iOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
            -derivedDataPath "${{ github.workspace }}/ci-outputs/test-results/DerivedData" \
            -enableCodeCoverage NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcbeautify
